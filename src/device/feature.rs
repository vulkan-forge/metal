use std::{
	fmt
};
use crate::Unbuildable;

features! {
	ash::vk::PhysicalDeviceFeatures, ash::vk::TRUE,
	robust_buffer_access: RobustBufferAcess => robust_buffer_access: "Robust Buffer Access",
	full_draw_index_uint32: FullDrawIndexUint32 => full_draw_index_uint32: "Full Draw Index uin32",
	image_cube_array: ImageCubeArray => image_cube_array: "Image Cube Array",
	independent_blend: IndependentBlend => independent_blend: "Indendent Blend",
	geometry_shader: GeometryShader => geometry_shader: "Geometry Shader",
	tessellation_shader: TesselationShader => tessellation_shader: "Tesselation Shader",
	sample_rate_shading: SampleRateShading => sample_rate_shading: "Sample Rate Shading",
	dual_src_blend: DualSrcBlend => dual_src_blend: "Dual Source Blending",
	logic_op: LogicOp => logic_op: "Logic Operations",
	multi_draw_indirect: MultiDrawIndirect => multi_draw_indirect: "Multiple Draw Indirect",
	draw_indirect_first_instance: DrawIndirectFirstInstance => draw_indirect_first_instance: "Draw Indirect First Instance",
	depth_clamp: DepthClamp => depth_clamp: "Depth Clamping",
	depth_bias_clamp: DepthBiasClamp => depth_bias_clamp: "Depth Bias Clamping",
	fill_mode_non_solid: FillModeNonSolid => fill_mode_non_solid: "Non Solid Fill Modes",
	depth_bounds: DepthBounds => depth_bounds: "Depth Bounds",
	wide_lines: WideLines => wide_lines: "Wide Lines",
	large_points: LargePoints => large_points: "LargePoints",
	alpha_to_one: AlphaToOne => alpha_to_one: "Alpha To One",
	multi_viewport: MultiViewport => multi_viewport: "Multi Viewport",
	sampler_anisotropy: SamplerAnisotropy => sampler_anisotropy: "Sampler Anisotropy",
	texture_compression_etc2: TextureCompressionEtc2 => texture_compression_etc2: "ETC2 Texture Compression",
	texture_compression_astc_ldr: TextureCompressionAstcLdr => texture_compression_astc_ldr: "ASTC LDR Texture Compression",
	texture_compression_bc: TextureCompressionBc => texture_compression_bc: "BC Texture Compression",
	occlusion_query_precise: OcclusionQueryPrecise => occlusion_query_precise: "Precise Occlusion Query",
	pipeline_statistics_query: PipelineStatisticsQuery => pipeline_statistics_query: "Pipeline Statistics Query",
	vertex_pipeline_stores_and_atomics: VertexPipielineStoresAndAtomics => vertex_pipeline_stores_and_atomics: "Vertex Pipeline Stores and Atomics",
	fragment_stores_and_atomics: FragmentStoresAndAtomics => fragment_stores_and_atomics: "Fragment Stores and Atomics",
	shader_tessellation_and_geometry_point_size: ShaderTesselationAndGeometryPointSize => shader_tessellation_and_geometry_point_size: "Tesselation and Geometry Shader Point Size",
	shader_image_gather_extended: ShaderImageGatherExtended => shader_image_gather_extended: "Extended Image Gather Shader Instructions",
	shader_storage_image_extended_formats: ShaderStorageImageExtendedFormats => shader_storage_image_extended_formats: "Extended Shader Image Storage Formats",
	shader_storage_image_multisample: ShaderStorageImageMultisample => shader_storage_image_multisample: "Multisampled Shader Image Storage",
	shader_storage_image_read_without_format: ShaderStorageImageReadWithoutFormat => shader_storage_image_read_without_format: "Read Shader Image Without Format",
	shader_storage_image_write_without_format: ShaderStorageImageWriteWithoutFormat => shader_storage_image_write_without_format: "Write Shader Image Without Format",
	shader_uniform_buffer_array_dynamic_indexing: ShaderUniformBufferArrayDynamicIndexing => shader_uniform_buffer_array_dynamic_indexing: "Dynamic Shader Uniform Buffer Array Indexing",
	shader_sampled_image_array_dynamic_indexing: ShaderSampledImageArrayDynamicIndexing => shader_sampled_image_array_dynamic_indexing: "Dynamic Shader Sampled Image Array Indexing",
	shader_storage_buffer_array_dynamic_indexing: ShaderStorageBufferArrayDynamicIndxing => shader_storage_buffer_array_dynamic_indexing: "Dynamic Shader Storage Buffer Array Indexing",
	shader_storage_image_array_dynamic_indexing: ShaderStorageImageArrayDynamicIndexing => shader_storage_image_array_dynamic_indexing: "Dynamic Shader Storage Image Array Indexing",
	shader_clip_distance: ShaderClipDistance => shader_clip_distance: "Clip Distance Shader Support",
	shader_cull_distance: ShaderCullDistance => shader_cull_distance: "Cull Distance Shader Support",
	shader_float64: ShaderFloat64 => shader_float64: "64-bits Floats Shader Support",
	shader_int64: ShaderInt64 => shader_int64: "64-bits Integers Shader Support",
	shader_int16: ShaderInt16 => shader_int16: "16-bits Integers Shader Support",
	shader_resource_residency: ShaderResourceResidency => shader_resource_residency: "Resource Residency Shader Support",
	shader_resource_min_lod: ShaderResourceMinLod => shader_resource_min_lod: "Minimum Resource LOD Shader Support",
	sparse_binding: SparseBinding => sparse_binding: "Sparse Binding",
	sparse_residency_buffer: SparseResidencyBuffer => sparse_residency_buffer: "Sparse Residency Buffer",
	sparse_residency_image2d: SparseResidencyImage2d => sparse_residency_image2_d: "2D Image Sparse Residency",
	sparse_residency_image3d: SparseResidencyImage3d => sparse_residency_image3_d: "3D Image Sparse Residency",
	sparse_residency_2_samples: SparseResidency2Samples => sparse_residency2_samples: "2 Samples 2D Image Sparse Residency",
	sparse_residency_4_samples: SparseResidency4Samples => sparse_residency4_samples: "4 Samples 2D Image Sparse Residency",
	sparse_residency_8_samples: SparseResidency8Samples => sparse_residency8_samples: "8 Samples 2D Image Sparse Residency",
	sparse_residency_16_samples: SparseResidency16Samples => sparse_residency16_samples: "16 Samples 2D Image Sparse Residency",
	sparse_residency_aliased: SparseResidencyAliased => sparse_residency_aliased: "Aliased Sparse Residency",
	variable_multisample_rate: VariableMultisampleRate => variable_multisample_rate: "Variable Multisample Rate",
	inherited_queries: InheritedQueries => inherited_queries: "Inherited Queries",
}
